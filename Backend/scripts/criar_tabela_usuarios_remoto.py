#!/usr/bin/env python3
"""
Script para criar tabela Usuarios no servidor remoto
"""

try:
    import psycopg
except ImportError:
    print("‚ùå psycopg n√£o encontrado. Instalando...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "psycopg[binary]"])
    import psycopg

import sys
import os

# Configura√ß√µes de conex√£o - SERVIDOR REMOTO
DB_CONFIG = {
    'host': '10.10.255.111',  # IP do servidor remoto
    'port': 5432,
    'dbname': 'BASE',
    'user': 'BASE',
    'password': 'BASE'
}

def test_connection():
    """Testa a conex√£o com o banco remoto"""
    try:
        with psycopg.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()
                print(f"‚úÖ Conex√£o estabelecida com PostgreSQL remoto: {version[0]}")
                return True
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        print("üí° Verifique se:")
        print("   - O servidor 10.10.255.111 est√° acess√≠vel")
        print("   - A porta 5432 est√° aberta")
        print("   - As credenciais est√£o corretas")
        return False

def create_usuarios_table():
    """Cria a tabela Usuarios"""
    try:
        with psycopg.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                
                print("üìù Criando tabela Usuarios...")
                
                # Executa o script SQL
                sql_commands = [
                    "DROP TABLE IF EXISTS \"Usuarios\" CASCADE",
                    """
                    CREATE TABLE "Usuarios" (
                        "IdUsuarios" SERIAL PRIMARY KEY,
                        "Nome" VARCHAR(300) NOT NULL,
                        "CPF" VARCHAR(14) UNIQUE NOT NULL,
                        "Funcao" VARCHAR(300) NOT NULL,
                        "Email" VARCHAR(400) UNIQUE NOT NULL,
                        "Usuario" VARCHAR(200) UNIQUE NOT NULL,
                        "Senha" VARCHAR(200) NOT NULL,
                        "Perfil" VARCHAR(300) NOT NULL,
                        "Cadastrante" VARCHAR(400) NOT NULL,
                        "DataCadastro" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
                    )
                    """,
                    "CREATE INDEX idx_usuarios_cpf ON \"Usuarios\"(\"CPF\")",
                    "CREATE INDEX idx_usuarios_email ON \"Usuarios\"(\"Email\")",
                    "CREATE INDEX idx_usuarios_usuario ON \"Usuarios\"(\"Usuario\")",
                    """
                    INSERT INTO "Usuarios" ("Nome", "CPF", "Funcao", "Email", "Usuario", "Senha", "Perfil", "Cadastrante") VALUES
                    ('Administrador do Sistema', '00000000000', 'Administrador', 'base@itfact.com.br', 'ADMIN', 'ADMIN', 'Administrador', 'Sistema')
                    """
                ]
                
                for i, command in enumerate(sql_commands, 1):
                    try:
                        cursor.execute(command)
                        if i == 1:
                            print("‚úÖ Tabela anterior removida (se existia)")
                        elif i == 2:
                            print("‚úÖ Tabela Usuarios criada")
                        elif i == 3:
                            print("‚úÖ √çndice CPF criado")
                        elif i == 4:
                            print("‚úÖ √çndice Email criado")
                        elif i == 5:
                            print("‚úÖ √çndice Usu√°rio criado")
                        elif i == 6:
                            print("‚úÖ Usu√°rio ADMIN inserido")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Aviso no comando {i}: {e}")
                
                conn.commit()
                print("‚úÖ Tabela Usuarios criada com sucesso!")
                return True
                
    except Exception as e:
        print(f"‚ùå Erro ao criar tabela: {e}")
        return False

def verify_table():
    """Verifica se a tabela foi criada corretamente"""
    try:
        with psycopg.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                
                # Verifica se a tabela existe
                cursor.execute("""
                    SELECT COUNT(*) FROM information_schema.tables 
                    WHERE table_name = 'Usuarios'
                """)
                
                if cursor.fetchone()[0] == 0:
                    print("‚ùå Tabela Usuarios n√£o foi criada")
                    return False
                
                # Verifica estrutura
                cursor.execute("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'Usuarios' 
                    ORDER BY ordinal_position
                """)
                
                columns = cursor.fetchall()
                print("\nüìã Estrutura da tabela Usuarios:")
                for col in columns:
                    print(f"  - {col[0]}: {col[1]}")
                
                # Verifica dados
                cursor.execute("SELECT COUNT(*) FROM \"Usuarios\"")
                count = cursor.fetchone()[0]
                print(f"\nüìä Total de usu√°rios: {count}")
                
                # Lista usu√°rios
                cursor.execute("SELECT \"Nome\", \"Email\", \"Usuario\", \"Perfil\" FROM \"Usuarios\"")
                users = cursor.fetchall()
                print("\nüë• Usu√°rios criados:")
                for user in users:
                    print(f"  - {user[0]} ({user[1]}) - {user[2]} - {user[3]}")
                
                return True
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabela: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß Cria√ß√£o da Tabela Usuarios - SERVIDOR REMOTO")
    print("=" * 50)
    
    # Testa conex√£o
    if not test_connection():
        print("‚ùå N√£o foi poss√≠vel conectar ao banco de dados remoto")
        sys.exit(1)
    
    # Cria tabela
    if create_usuarios_table():
        print("\nüîç Verificando se a tabela foi criada corretamente...")
        verify_table()
        
        print("\nüéâ Tabela Usuarios criada com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("  1. Execute o script de atualiza√ß√£o de autentica√ß√£o")
        print("  2. Reinicie o servidor backend no Docker remoto")
        print("  3. Teste o login com o usu√°rio ADMIN")
        
        print("\nüîë Usu√°rio dispon√≠vel:")
        print("  - base@itfact.com.br / ADMIN / ADMIN")
        
    else:
        print("‚ùå Falha na cria√ß√£o da tabela")
        sys.exit(1)

if __name__ == "__main__":
    main() 