#!/usr/bin/env python3
"""
Script para testar conectividade com o servidor PostgreSQL
"""
import socket
import time
import psycopg

def testar_conectividade_rede():
    """Testa se consegue conectar na porta 5432 do servidor"""
    print("üîç Testando conectividade de rede...")
    
    try:
        # Testa conex√£o TCP na porta 5432
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)  # 10 segundos de timeout
        
        print("üì° Tentando conectar em 10.10.255.111:5432...")
        start_time = time.time()
        result = sock.connect_ex(('10.10.255.111', 5432))
        connection_time = time.time() - start_time
        sock.close()
        
        print(f"‚è±Ô∏è Tempo de tentativa: {connection_time:.2f} segundos")
        
        if result == 0:
            print("‚úÖ Porta 5432 est√° acess√≠vel!")
            return True
        else:
            print(f"‚ùå Porta 5432 n√£o est√° acess√≠vel (erro: {result})")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar conectividade: {e}")
        return False

def testar_conexao_postgres():
    """Testa conex√£o com PostgreSQL"""
    print("\nüêò Testando conex√£o com PostgreSQL...")
    
    try:
        # Configura√ß√£o de conex√£o
        config = {
            'host': '10.10.255.111',
            'port': 5432,
            'dbname': 'BASE',
            'user': 'BASE',
            'password': 'BASE',
            'connect_timeout': 15  # 15 segundos de timeout
        }
        
        print("üîå Tentando conectar...")
        start_time = time.time()
        
        conn = psycopg.connect(**config)
        connection_time = time.time() - start_time
        
        print(f"‚úÖ Conex√£o estabelecida em {connection_time:.2f} segundos!")
        
        # Testa query simples
        with conn.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ PostgreSQL vers√£o: {version[0]}")
            
            # Verifica se o banco BASE existe
            cursor.execute("SELECT current_database();")
            db_name = cursor.fetchone()
            print(f"‚úÖ Banco atual: {db_name[0]}")
            
            # Lista as tabelas existentes
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            print(f"‚úÖ Tabelas existentes: {len(tables)}")
            for table in tables:
                print(f"   - {table[0]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o PostgreSQL: {e}")
        return False

def testar_conexao_postgres_alternativa():
    """Testa conex√£o com PostgreSQL usando usu√°rio postgres padr√£o"""
    print("\nüêò Testando conex√£o alternativa com usu√°rio postgres...")
    
    try:
        # Configura√ß√£o de conex√£o alternativa
        config = {
            'host': '10.10.255.111',
            'port': 5432,
            'dbname': 'postgres',  # Banco padr√£o
            'user': 'postgres',    # Usu√°rio padr√£o
            'password': 'postgres', # Senha padr√£o
            'connect_timeout': 10
        }
        
        print("üîå Tentando conectar com usu√°rio postgres...")
        start_time = time.time()
        
        conn = psycopg.connect(**config)
        connection_time = time.time() - start_time
        
        print(f"‚úÖ Conex√£o estabelecida em {connection_time:.2f} segundos!")
        
        # Testa query simples
        with conn.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ PostgreSQL vers√£o: {version[0]}")
            
            # Lista os bancos de dados
            cursor.execute("SELECT datname FROM pg_database;")
            databases = cursor.fetchall()
            print(f"‚úÖ Bancos de dados existentes:")
            for db in databases:
                print(f"   - {db[0]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o alternativa: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Testando conectividade com servidor PostgreSQL...")
    print("=" * 60)
    
    # Testa conectividade de rede
    rede_ok = testar_conectividade_rede()
    
    if rede_ok:
        # Testa conex√£o PostgreSQL com usu√°rio BASE
        postgres_ok = testar_conexao_postgres()
        
        if postgres_ok:
            print("\nüéâ Conectividade testada com sucesso!")
            print("‚úÖ Rede: OK")
            print("‚úÖ PostgreSQL: OK")
            return True
        else:
            print("\n‚ö†Ô∏è Tentando conex√£o alternativa...")
            # Testa conex√£o alternativa
            postgres_alt_ok = testar_conexao_postgres_alternativa()
            
            if postgres_alt_ok:
                print("\n‚ö†Ô∏è Conex√£o alternativa funcionou!")
                print("‚úÖ Rede: OK")
                print("‚ö†Ô∏è PostgreSQL: OK (usu√°rio postgres)")
                print("‚ùå PostgreSQL: FALHOU (usu√°rio BASE)")
                return True
            else:
                print("\n‚ùå Ambas as conex√µes falharam")
                print("‚úÖ Rede: OK")
                print("‚ùå PostgreSQL: FALHOU")
                return False
    else:
        print("\n‚ùå Problema de conectividade de rede")
        print("‚ùå Rede: FALHOU")
        print("‚ùå PostgreSQL: N√ÉO TESTADO")
        return False

if __name__ == "__main__":
    sucesso = main()
    exit(0 if sucesso else 1) 