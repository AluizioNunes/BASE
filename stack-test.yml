version: '3.9'
services:
  traefik:
    image: traefik:v3.4
    container_name: base-traefik
    command:
      - --api.insecure=false
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@exemplo.com}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/BASE/volumes/traefik_data:/letsencrypt
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - base-network

  grafana:
    image: grafana/grafana:latest
    container_name: base-grafana
    ports:
      - "3001:3000"
    volumes:
      - /var/lib/docker/BASE/volumes/grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
    depends_on:
      - loki
    networks:
      - base-network

  loki:
    image: grafana/loki:3.5.1
    container_name: base-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /var/lib/docker/BASE/volumes/loki_data:/loki
    networks:
      - base-network

  frontend:
    image: ${REGISTRY:-localhost}/base-frontend:${TAG:-latest}
    container_name: base-frontend
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run build && npx serve -s build
    volumes:
      - ./build:/app/build
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-https://localhost/api}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - traefik
      - backend
    networks:
      - base-network

  backend:
    image: ${REGISTRY:-localhost}/base-backend:${TAG:-latest}
    container_name: base-backend
    build:
      context: ./Backend
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    environment:
      - DEBUG=${DEBUG:-False}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-https://localhost}
      - DATABASE_URL=${DATABASE_URL:-postgresql://usuario:senha@db:5432/meubanco}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672/}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    depends_on:
      - traefik
      - db
      - redis
      - rabbitmq
    networks:
      - base-network

  db:
    image: postgres:17.5
    container_name: base-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-usuario}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-senha}
      - POSTGRES_DB=${POSTGRES_DB:-meubanco}
    volumes:
      - /var/lib/docker/BASE/volumes/pgsql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - base-network

  redis:
    image: redis:8.0-alpine
    container_name: base-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - /var/lib/docker/BASE/volumes/redis_data:/data
    networks:
      - base-network

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: base-rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - /var/lib/docker/BASE/volumes/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - base-network

networks:
  base-network:
    driver: bridge

# Volumes s√£o gerenciados diretamente nos caminhos /var/lib/docker/BASE/volumes/ 