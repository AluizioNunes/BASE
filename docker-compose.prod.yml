version: '3.9'
services:
  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    command:
      # Configurações básicas
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=base_network
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # Certificados SSL
      - --certificatesresolvers.letsencrypt.acme.email=base@itfact.com.br
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      
      # Logs
      - --log.level=INFO
      - --accesslog=true
      
      # Segurança
      - --serverstransport.insecureskipverify=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/BASE/volumes/traefik_data:/letsencrypt
    networks:
      - base_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/rawdata"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # Dashboard Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`10.10.255.111`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-stripprefix"
      - "traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes=/traefik"
      
      # Dashboard alternativo
      - "traefik.http.routers.traefik-dashboard-alt.rule=Host(`10.10.255.111`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik-dashboard-alt.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard-alt.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard-alt.service=api@internal"
      - "traefik.http.routers.traefik-dashboard-alt.middlewares=traefik-dashboard-stripprefix"
      - "traefik.http.middlewares.traefik-dashboard-stripprefix.stripprefix.prefixes=/dashboard"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "472:472"
    environment:
      - GF_SECURITY_ADMIN_USER=BASE
      - GF_SECURITY_ADMIN_PASSWORD=BASE
      - GF_SERVER_ROOT_URL=https://10.10.255.111/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - /var/lib/docker/BASE/volumes/grafana_data:/var/lib/grafana
    networks:
      - base_network
    depends_on:
      - loki
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`10.10.255.111`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=grafana-stripprefix"
      - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/grafana"

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    user: "1000:1000"
    volumes:
      - /var/lib/docker/BASE/volumes/loki_data:/loki
    networks:
      - base_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=Host(`10.10.255.111`) && PathPrefix(`/loki`)"
      - "traefik.http.routers.loki.entrypoints=websecure"
      - "traefik.http.routers.loki.tls.certresolver=letsencrypt"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"
      - "traefik.http.routers.loki.middlewares=loki-stripprefix"
      - "traefik.http.middlewares.loki-stripprefix.stripprefix.prefixes=/loki"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    command: sh -c "npm run build && npm run preview -- --host 0.0.0.0 --port 3000"
    environment:
      - VITE_API_URL=https://10.10.255.111/api
    networks:
      - base_network
    depends_on:
      - traefik
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`10.10.255.111`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=1"

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2
    environment:
      - DEBUG=False
      - BACKEND_CORS_ORIGINS=https://10.10.255.111
      - DBHOST=db
      - DBNAME=BASE
      - DBUSER=BASE
      - DBPASSWORD=BASE
      - DBSCHEMA=BASE
      - REDIS_HOST=redis
      - REDIS_PASSWORD=BASE
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=BASE
      - RABBITMQ_DEFAULT_PASS=BASE
    networks:
      - base_network
    depends_on:
      - traefik
      - db
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`10.10.255.111`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"

  db:
    image: postgres:17.5
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=BASE
      - POSTGRES_PASSWORD=BASE
      - POSTGRES_DB=BASE
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - /var/lib/docker/BASE/volumes/pgsql_data:/var/lib/postgresql/data
    networks:
      - base_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U BASE -d BASE"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:8.0-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "BASE", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    volumes:
      - /var/lib/docker/BASE/volumes/redis_data:/data
    networks:
      - base_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "BASE", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=BASE
      - RABBITMQ_DEFAULT_PASS=BASE
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - /var/lib/docker/BASE/volumes/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - base_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`10.10.255.111`) && PathPrefix(`/rabbitmq`)"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls.certresolver=letsencrypt"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.http.routers.rabbitmq.middlewares=rabbitmq-stripprefix"
      - "traefik.http.middlewares.rabbitmq-stripprefix.stripprefix.prefixes=/rabbitmq"

networks:
  base_network:
    driver: bridge
    name: base_network

# Volumes são gerenciados diretamente nos caminhos /var/lib/docker/BASE/volumes/
# Recomendado: backup regular deste diretório para segurança dos dados.
# Firewall: mantenha abertas apenas as portas 80/443 para o público.
# Logs: Loki integrado ao Grafana para centralização de logs. 
