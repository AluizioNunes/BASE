version: '3.9'

############################
#  DOCKER COMPOSE - PROD   #
#  SEM TRAEFIK (exposição   #
#  direta de portas)        #
############################

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    command: sh -c "npm run build && npm run preview -- --host 0.0.0.0 --port 3000"
    ports:
      - "3000:3000"   # React/Vite
    environment:
      - VITE_API_URL=http://10.10.255.111:8080/api
    networks:
      - base_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2
    ports:
      - "8080:8000"   # Host 8080 -> Container 8000
    environment:
      - DEBUG=False
      - DBHOST=db
      - DBNAME=BASE
      - DBUSER=BASE
      - DBPASSWORD=BASE
      - DBSCHEMA=BASE
      - REDIS_HOST=redis
      - REDIS_PASSWORD=BASE
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=BASE
      - RABBITMQ_DEFAULT_PASS=BASE
      - BACKEND_CORS_ORIGINS=http://10.10.255.111:3000,http://10.10.255.111:8080
    networks:
      - base_network
    depends_on:
      - db
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "472:472"
    ports:
      - "3001:3000"   # painel Grafana
    environment:
      - GF_SECURITY_ADMIN_USER=BASE
      - GF_SECURITY_ADMIN_PASSWORD=BASE
    volumes:
      - /var/lib/docker/BASE/volumes/grafana_data:/var/lib/grafana
    networks:
      - base_network
    depends_on:
      - loki
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "3100:3100"
    volumes:
      - /var/lib/docker/BASE/volumes/loki_data:/loki
    networks:
      - base_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # UI
    environment:
      - RABBITMQ_DEFAULT_USER=BASE
      - RABBITMQ_DEFAULT_PASS=BASE
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - /var/lib/docker/BASE/volumes/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - base_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:8.0-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "BASE", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    ports:
      - "6379:6379"
    volumes:
      - /var/lib/docker/BASE/volumes/redis_data:/data
    networks:
      - base_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "BASE", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:17.5
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=BASE
      - POSTGRES_PASSWORD=BASE
      - POSTGRES_DB=BASE
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - /var/lib/docker/BASE/volumes/pgsql_data:/var/lib/postgresql/data
    networks:
      - base_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U BASE -d BASE"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

networks:
  base_network:
    driver: bridge
    name: base_network 
